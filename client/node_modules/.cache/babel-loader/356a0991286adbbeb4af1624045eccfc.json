{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx\";\n// TODO: update sidebar to use IDs (in case of duplicate artist/playlist names)\nimport * as React from \"react\";\nimport axios from \"axios\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport animateScrollTo from \"animated-scroll-to\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport OverlayShadow from \"./components/OverlayShadow\";\nimport URLParser from \"./util/URLParser\";\nimport \"./stylesheets/Fonts.css\";\nimport \"./stylesheets/App.css\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      displayName: \"\",\n      currentScreen: {\n        name: \"Home\",\n        type: \"Home\"\n      },\n      loggedIn: false,\n      listsLoaded: false,\n      accessToken: \"\",\n      // countryCode: \"\",\n      recentlyPlayed: [],\n      topTracks: [],\n      playlists: {},\n      topArtists: {},\n      sidebarShowing: false\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * ----------------------------------------------Authorization Flow---------------------------------------------------\n     */\n    const cookies = new Cookies(); // if we were redirected from /callback (obtained an accessToken)\n\n    if (cookies.get(\"spotifyMTVAccessToken\") !== undefined // cookies.get(\"spotifyMTVCountryCode\") !== undefined\n    ) {\n        this.setState({\n          accessToken: cookies.get(\"spotifyMTVAccessToken\") // countryCode: cookies.get(\"spotifyMTVCountryCode\"),\n\n        });\n        const url = \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" + cookies.get(\"spotifyMTVAccessToken\");\n        fetch(url).then(res => res.text()).then(res => this.setState({\n          displayName: res\n        })); // remove it from the cookies (later will hash cookie name instead of deleting it so other sites can't retrieve it)\n\n        cookies.remove(\"spotifyMTVAccessToken\");\n      } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\");\n\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url).then(authInfo => authInfo.json()).then(authInfo => {\n          cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken);\n          window.location.href = \"/\"; // this will reload the page again\n        });\n      }\n    }\n  }\n\n  componentDidUpdate({}, prevState) {\n    if (prevState.accessToken === \"\" && this.state.accessToken !== \"\") {\n      this.getAllLists();\n    }\n  }\n  /**\n   * ----------------------------------------------------Calls to back end-------------------------------------------------\n   */\n\n  /**\n   * Calls the login endpoint to obtain an authorization URL (which will then return an auth code).\n   */\n\n\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url).then(authURL => authURL.text()).then(authURL => window.location.href = authURL);\n  }\n  /**\n   * Get all the lists after logging in.\n   * Updates state once all Promises to back-end for lists are resolved.\n   */\n\n\n  getAllLists() {\n    Promise.all([this.getTopTracks(), this.getRecentlyPlayed(), this.getPlaylists(), this.getTopArtists()]).then(responses => {\n      for (let i = 0; i < 3; i++) {\n        const response = responses[i];\n\n        if (typeof response === \"object\") {\n          if (i === 0) this.setState({\n            topTracks: response.data\n          }); // if (i === 1) {\n          //   console.log(response.data);\n          //   this.setState({ recentlyPlayed: response.data });\n          // } // response is recently played\n          // if (i === 2) this.setState({ playlists: response.data }); // response is playlists\n          // if (i === 3) this.setState({ topArtists: response.data }); // response is topArtists\n        }\n      }\n\n      this.setState({\n        listsLoaded: true\n      }); // we can get rid of loading displays\n\n      console.log(\"getAllLists() done\");\n    });\n  }\n\n  getTopTracks() {\n    const url = domain + \"/mtvApi/getTopTracks?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n  /**\n   * Gets the user's Spotify display name.\n   */\n\n\n  getDisplayName() {\n    const url = domain + \"/mtvApi/getDisplayName?accessToken=\" + this.state.accessToken;\n    fetch(url).then(res => res.text()).then(res => this.setState({\n      displayName: res\n    }));\n  }\n  /**\n   * Gets an array of music videos for the user's recently played tracks on Spotify.\n   */\n\n\n  getRecentlyPlayed() {\n    const url = domain + \"/mtvApi/getRecentlyPlayed?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n  /**\n   * Gets a dictionary of ```[id]: Playlist``` for each of the user's public playlists on Spotify.\n   */\n\n\n  getPlaylists() {\n    const url = domain + \"/mtvApi/getPlaylists?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n  /**\n   * Gets a dictionary of ```[id]: Artist``` for each of the user's top artists on Spotify.\n   */\n\n\n  async getTopArtists() {\n    const country = \"US\"; // TODO: make this custom to client's location\n\n    const url = domain + \"/mtvApi/getTopArtists?accessToken=\" + this.state.accessToken + \"&country=\" + country;\n    return axios.get(url);\n  }\n  /**\n   * Gets all of the music videos and updates state for playlist with ```id```.\n   */\n\n\n  getPlaylistVideos(id) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n    var playlists = {};\n    Object.assign(playlists, this.state.playlists);\n    var tracks = playlists[id].tracks;\n    const body = {\n      tracks: tracks\n    };\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(res => {\n      // update the playlist's music videos in state\n      playlists[id].musicVideos = res;\n      this.setState({\n        playlists: playlists\n      });\n    });\n  }\n  /**\n   * Gets all of the music videos and updates state for artist with ```id```.\n   */\n\n\n  getArtistVideos(id) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n    var topArtists = {};\n    Object.assign(topArtists, this.state.topArtists);\n    var tracks = topArtists[id].tracks;\n    const body = {\n      tracks: tracks\n    };\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(res => {\n      // update the artist's music videos in state\n      topArtists[id].musicVideos = res;\n      this.setState({\n        topArtists: topArtists\n      });\n    });\n  }\n  /**\n   * --------------------------------------------Utility for Child Components-------------------------------------------------\n   */\n\n  /**\n   * Handles showing/hiding the sidebar.\n   */\n\n\n  toggleSidebar() {\n    this.setState({\n      sidebarShowing: !this.state.sidebarShowing\n    });\n  }\n  /**\n   * Handles selecting a sidebar item.\n   */\n\n\n  selectSidebarItem(title, type, itemID) {\n    var name = \"\";\n    if (type !== \"Playlist\" && type !== \"Artist\") name = title;else name = itemID;\n    this.setState({\n      currentScreen: {\n        name: name,\n        type: type\n      }\n    });\n    setTimeout(() => {\n      this.setState({\n        sidebarShowing: false\n      });\n      animateScrollTo([0, 0], {\n        maxDuration: 400\n      });\n    }, 150);\n  }\n\n  render() {\n    // user has logged in, show the app\n    if (this.state.accessToken.length) {\n      // get the list of music videos for the current screen\n      var musicVideos = [];\n      if (this.state.currentScreen.type === \"Home\") musicVideos = this.state.topTracks;\n      if (this.state.currentScreen.type === \"Recently Played\") musicVideos = this.state.recentlyPlayed;\n      if (this.state.currentScreen.type === \"Playlist\") musicVideos = this.state.playlists[this.state.currentScreen.name].musicVideos;\n      if (this.state.currentScreen.type === \"Artist\") musicVideos = this.state.topArtists[this.state.currentScreen.name].musicVideos;\n      console.log(musicVideos);\n      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid p-0\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Navbar, {\n        videos: [],\n        toggleSidebar: () => this.toggleSidebar(),\n        listsLoaded: this.state.listsLoaded,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Sidebar, {\n        currentScreen: this.state.currentScreen.name,\n        playlists: this.state.playlists,\n        topArtists: this.state.topArtists,\n        displaying: this.state.sidebarShowing,\n        selectSidebarItem: (title, type, itemID) => this.selectSidebarItem(title, type, itemID),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(OverlayShadow, {\n        displaying: this.state.sidebarShowing,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Main, {\n        title: this.state.currentScreen.name,\n        videos: musicVideos,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 13\n        }\n      })));\n    } // show the login screen\n    else return /*#__PURE__*/React.createElement(Login, {\n        login: () => this.login(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 17\n        }\n      });\n  }\n\n}\n\nvar getPosition = function (options) {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx"],"names":["React","axios","Component","Cookies","animateScrollTo","Main","Navbar","Login","Sidebar","OverlayShadow","URLParser","domain","App","state","displayName","currentScreen","name","type","loggedIn","listsLoaded","accessToken","recentlyPlayed","topTracks","playlists","topArtists","sidebarShowing","componentDidMount","cookies","get","undefined","setState","url","fetch","then","res","text","remove","window","location","href","authCode","authInfo","json","set","componentDidUpdate","prevState","getAllLists","login","authURL","Promise","all","getTopTracks","getRecentlyPlayed","getPlaylists","getTopArtists","responses","i","response","data","console","log","getDisplayName","country","getPlaylistVideos","id","Object","assign","tracks","body","method","headers","JSON","stringify","musicVideos","getArtistVideos","toggleSidebar","selectSidebarItem","title","itemID","setTimeout","maxDuration","render","length","getPosition","options","resolve","reject","navigator","geolocation","getCurrentPosition"],"mappings":";AAAA;AAEA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAqE,OAArE;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,OAAOC,OAAP,MAAoB,kBAApB;AACA,OAAOC,eAAP,MAA4B,oBAA5B;AAEA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AAGA,OAAOC,SAAP,MAAsB,kBAAtB;AAIA,OAAO,yBAAP;AACA,OAAO,uBAAP;AAEA,MAAMC,MAAM,GAAG,uBAAf;AAgBA,eAAe,MAAMC,GAAN,SAAkBV,SAAlB,CAA0C;AAAA;AAAA;AAAA,SACvDW,KADuD,GACrC;AAChBC,MAAAA,WAAW,EAAE,EADG;AAEhBC,MAAAA,aAAa,EAAE;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,IAAI,EAAE;AAAtB,OAFC;AAGhBC,MAAAA,QAAQ,EAAE,KAHM;AAIhBC,MAAAA,WAAW,EAAE,KAJG;AAKhBC,MAAAA,WAAW,EAAE,EALG;AAMhB;AACAC,MAAAA,cAAc,EAAE,EAPA;AAQhBC,MAAAA,SAAS,EAAE,EARK;AAShBC,MAAAA,SAAS,EAAE,EATK;AAUhBC,MAAAA,UAAU,EAAE,EAVI;AAWhBC,MAAAA,cAAc,EAAE;AAXA,KADqC;AAAA;;AAevDC,EAAAA,iBAAiB,GAAG;AAClB;;;AAGA,UAAMC,OAAO,GAAG,IAAIxB,OAAJ,EAAhB,CAJkB,CAKlB;;AACA,QACEwB,OAAO,CAACC,GAAR,CAAY,uBAAZ,MAAyCC,SAD3C,CAEE;AAFF,MAGE;AACA,aAAKC,QAAL,CAAc;AACZV,UAAAA,WAAW,EAAEO,OAAO,CAACC,GAAR,CAAY,uBAAZ,CADD,CAEZ;;AAFY,SAAd;AAIA,cAAMG,GAAG,GACP,6DACAJ,OAAO,CAACC,GAAR,CAAY,uBAAZ,CAFF;AAIAI,QAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS,KAAKJ,QAAL,CAAc;AAAEhB,UAAAA,WAAW,EAAEoB;AAAf,SAAd,CAFjB,EATA,CAYA;;AACAP,QAAAA,OAAO,CAACS,MAAR,CAAe,uBAAf;AACD,OAjBD,MAiBO;AACL;AACA,YAAML,GAAG,GAAGM,MAAM,CAACC,QAAP,CAAgBC,IAA5B;AACA,YAAMC,QAAQ,GAAG9B,SAAS,CAACqB,GAAD,EAAM,OAAN,CAA1B;;AAEA,UAAIS,QAAQ,KAAK,EAAjB,EAAqB;AACnB,cAAMT,GAAG,GAAGpB,MAAM,GAAG,wBAAT,GAAoC6B,QAAhD;AACAR,QAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSQ,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADtB,EAEGT,IAFH,CAESQ,QAAD,IAAc;AAClBd,UAAAA,OAAO,CAACgB,GAAR,CAAY,uBAAZ,EAAqCF,QAAQ,CAACrB,WAA9C;AACAiB,UAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB,CAFkB,CAEU;AAC7B,SALH;AAMD;AACF;AACF;;AAEDK,EAAAA,kBAAkB,CAAC,EAAD,EAAKC,SAAL,EAA0B;AAC1C,QAAIA,SAAS,CAACzB,WAAV,KAA0B,EAA1B,IAAgC,KAAKP,KAAL,CAAWO,WAAX,KAA2B,EAA/D,EAAmE;AACjE,WAAK0B,WAAL;AACD;AACF;AAED;;;;AAIA;;;;;AAGAC,EAAAA,KAAK,GAAG;AACN,UAAMhB,GAAG,GAAGpB,MAAM,GAAG,eAArB;AACAqB,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSe,OAAD,IAAaA,OAAO,CAACb,IAAR,EADrB,EAEGF,IAFH,CAESe,OAAD,IAAcX,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuBS,OAF7C;AAGD;AAED;;;;;;AAIAF,EAAAA,WAAW,GAAG;AACZG,IAAAA,OAAO,CAACC,GAAR,CAAY,CACV,KAAKC,YAAL,EADU,EAEV,KAAKC,iBAAL,EAFU,EAGV,KAAKC,YAAL,EAHU,EAIV,KAAKC,aAAL,EAJU,CAAZ,EAKGrB,IALH,CAKSsB,SAAD,IAAe;AACrB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,cAAMC,QAA8B,GAAGF,SAAS,CAACC,CAAD,CAAhD;;AACA,YAAI,OAAOC,QAAP,KAAoB,QAAxB,EAAkC;AAChC,cAAID,CAAC,KAAK,CAAV,EAAa,KAAK1B,QAAL,CAAc;AAAER,YAAAA,SAAS,EAAEmC,QAAQ,CAACC;AAAtB,WAAd,EADmB,CAEhC;AACA;AACA;AACA;AACA;AACA;AACD;AACF;;AACD,WAAK5B,QAAL,CAAc;AAAEX,QAAAA,WAAW,EAAE;AAAf,OAAd,EAbqB,CAaiB;;AACtCwC,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,KApBD;AAqBD;;AAEDT,EAAAA,YAAY,GAAG;AACb,UAAMpB,GAAG,GACPpB,MAAM,GAAG,mCAAT,GAA+C,KAAKE,KAAL,CAAWO,WAD5D;AAEA,WAAOnB,KAAK,CAAC2B,GAAN,CAAUG,GAAV,CAAP;AACD;AAED;;;;;AAGA8B,EAAAA,cAAc,GAAG;AACf,UAAM9B,GAAG,GACPpB,MAAM,GAAG,qCAAT,GAAiD,KAAKE,KAAL,CAAWO,WAD9D;AAEAY,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADjB,EAEGF,IAFH,CAESC,GAAD,IAAS,KAAKJ,QAAL,CAAc;AAAEhB,MAAAA,WAAW,EAAEoB;AAAf,KAAd,CAFjB;AAGD;AAED;;;;;AAGAkB,EAAAA,iBAAiB,GAAG;AAClB,UAAMrB,GAAG,GACPpB,MAAM,GACN,wCADA,GAEA,KAAKE,KAAL,CAAWO,WAHb;AAIA,WAAOnB,KAAK,CAAC2B,GAAN,CAAUG,GAAV,CAAP;AACD;AAED;;;;;AAGAsB,EAAAA,YAAY,GAAG;AACb,UAAMtB,GAAG,GACPpB,MAAM,GAAG,mCAAT,GAA+C,KAAKE,KAAL,CAAWO,WAD5D;AAEA,WAAOnB,KAAK,CAAC2B,GAAN,CAAUG,GAAV,CAAP;AACD;AAED;;;;;AAGA,QAAMuB,aAAN,GAAsB;AACpB,UAAMQ,OAAO,GAAG,IAAhB,CADoB,CACE;;AACtB,UAAM/B,GAAG,GACPpB,MAAM,GACN,oCADA,GAEA,KAAKE,KAAL,CAAWO,WAFX,GAGA,WAHA,GAIA0C,OALF;AAMA,WAAO7D,KAAK,CAAC2B,GAAN,CAAUG,GAAV,CAAP;AACD;AAED;;;;;AAGAgC,EAAAA,iBAAiB,CAACC,EAAD,EAAa;AAC5B,UAAMjC,GAAG,GAAGpB,MAAM,GAAG,6BAArB;AAEA,QAAIY,SAEH,GAAG,EAFJ;AAGA0C,IAAAA,MAAM,CAACC,MAAP,CAAc3C,SAAd,EAAyB,KAAKV,KAAL,CAAWU,SAApC;AACA,QAAI4C,MAAM,GAAG5C,SAAS,CAACyC,EAAD,CAAT,CAAcG,MAA3B;AAEA,UAAMC,IAAI,GAAG;AACXD,MAAAA,MAAM,EAAEA;AADG,KAAb;AAIAnC,IAAAA,KAAK,CAACD,GAAD,EAAM;AACTsC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTF,MAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALG,KAAN,CAAL,CAOGnC,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACQ,IAAJ,EAPjB,EAQGT,IARH,CAQSC,GAAD,IAAS;AACb;AACAX,MAAAA,SAAS,CAACyC,EAAD,CAAT,CAAcS,WAAd,GAA4BvC,GAA5B;AACA,WAAKJ,QAAL,CAAc;AACZP,QAAAA,SAAS,EAAEA;AADC,OAAd;AAGD,KAdH;AAeD;AAED;;;;;AAGAmD,EAAAA,eAAe,CAACV,EAAD,EAAa;AAC1B,UAAMjC,GAAG,GAAGpB,MAAM,GAAG,6BAArB;AAEA,QAAIa,UAAoC,GAAG,EAA3C;AACAyC,IAAAA,MAAM,CAACC,MAAP,CAAc1C,UAAd,EAA0B,KAAKX,KAAL,CAAWW,UAArC;AACA,QAAI2C,MAAM,GAAG3C,UAAU,CAACwC,EAAD,CAAV,CAAeG,MAA5B;AAEA,UAAMC,IAAI,GAAG;AACXD,MAAAA,MAAM,EAAEA;AADG,KAAb;AAIAnC,IAAAA,KAAK,CAACD,GAAD,EAAM;AACTsC,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFA;AAKTF,MAAAA,IAAI,EAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf;AALG,KAAN,CAAL,CAOGnC,IAPH,CAOSC,GAAD,IAASA,GAAG,CAACQ,IAAJ,EAPjB,EAQGT,IARH,CAQSC,GAAD,IAAS;AACb;AACAV,MAAAA,UAAU,CAACwC,EAAD,CAAV,CAAeS,WAAf,GAA6BvC,GAA7B;AACA,WAAKJ,QAAL,CAAc;AACZN,QAAAA,UAAU,EAAEA;AADA,OAAd;AAGD,KAdH;AAeD;AAED;;;;AAIA;;;;;AAGAmD,EAAAA,aAAa,GAAG;AACd,SAAK7C,QAAL,CAAc;AACZL,MAAAA,cAAc,EAAE,CAAC,KAAKZ,KAAL,CAAWY;AADhB,KAAd;AAGD;AAED;;;;;AAGAmD,EAAAA,iBAAiB,CAACC,KAAD,EAAgB5D,IAAhB,EAA8B6D,MAA9B,EAA8C;AAC7D,QAAI9D,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,QAApC,EAA8CD,IAAI,GAAG6D,KAAP,CAA9C,KACK7D,IAAI,GAAG8D,MAAP;AACL,SAAKhD,QAAL,CAAc;AAAEf,MAAAA,aAAa,EAAE;AAAEC,QAAAA,IAAI,EAAEA,IAAR;AAAcC,QAAAA,IAAI,EAAEA;AAApB;AAAjB,KAAd;AACA8D,IAAAA,UAAU,CAAC,MAAM;AACf,WAAKjD,QAAL,CAAc;AAAEL,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACArB,MAAAA,eAAe,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,EAAS;AACtB4E,QAAAA,WAAW,EAAE;AADS,OAAT,CAAf;AAGD,KALS,EAKP,GALO,CAAV;AAMD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,QAAI,KAAKpE,KAAL,CAAWO,WAAX,CAAuB8D,MAA3B,EAAmC;AACjC;AACA,UAAIT,WAAyB,GAAG,EAAhC;AAEA,UAAI,KAAK5D,KAAL,CAAWE,aAAX,CAAyBE,IAAzB,KAAkC,MAAtC,EACEwD,WAAW,GAAG,KAAK5D,KAAL,CAAWS,SAAzB;AACF,UAAI,KAAKT,KAAL,CAAWE,aAAX,CAAyBE,IAAzB,KAAkC,iBAAtC,EACEwD,WAAW,GAAG,KAAK5D,KAAL,CAAWQ,cAAzB;AACF,UAAI,KAAKR,KAAL,CAAWE,aAAX,CAAyBE,IAAzB,KAAkC,UAAtC,EACEwD,WAAW,GAAG,KAAK5D,KAAL,CAAWU,SAAX,CAAqB,KAAKV,KAAL,CAAWE,aAAX,CAAyBC,IAA9C,EACXyD,WADH;AAEF,UAAI,KAAK5D,KAAL,CAAWE,aAAX,CAAyBE,IAAzB,KAAkC,QAAtC,EACEwD,WAAW,GAAG,KAAK5D,KAAL,CAAWW,UAAX,CAAsB,KAAKX,KAAL,CAAWE,aAAX,CAAyBC,IAA/C,EACXyD,WADH;AAGFd,MAAAA,OAAO,CAACC,GAAR,CAAYa,WAAZ;AAEA,0BACE,uDACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAwBE,oBAAC,MAAD;AACE,QAAA,MAAM,EAAE,EADV;AAEE,QAAA,aAAa,EAAE,MAAM,KAAKE,aAAL,EAFvB;AAGE,QAAA,WAAW,EAAE,KAAK9D,KAAL,CAAWM,WAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBF,eA6BE,oBAAC,OAAD;AACE,QAAA,aAAa,EAAE,KAAKN,KAAL,CAAWE,aAAX,CAAyBC,IAD1C;AAEE,QAAA,SAAS,EAAE,KAAKH,KAAL,CAAWU,SAFxB;AAGE,QAAA,UAAU,EAAE,KAAKV,KAAL,CAAWW,UAHzB;AAIE,QAAA,UAAU,EAAE,KAAKX,KAAL,CAAWY,cAJzB;AAKE,QAAA,iBAAiB,EAAE,CACjBoD,KADiB,EAEjB5D,IAFiB,EAGjB6D,MAHiB,KAId,KAAKF,iBAAL,CAAuBC,KAAvB,EAA8B5D,IAA9B,EAAoC6D,MAApC,CATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA7BF,eAwCE,oBAAC,aAAD;AAAe,QAAA,UAAU,EAAE,KAAKjE,KAAL,CAAWY,cAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxCF,eAyCE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKZ,KAAL,CAAWE,aAAX,CAAyBC,IAAtC;AAA4C,QAAA,MAAM,EAAEyD,WAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAzCF,CADF,CADF;AA+CD,KAhED,CAiEA;AAjEA,SAkEK,oBAAO,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAE,MAAM,KAAK1B,KAAL,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACN;;AA5TsD;;AA+TzD,IAAIoC,WAAW,GAAG,UAAUC,OAAV,EAAwB;AACxC,SAAO,IAAInC,OAAJ,CAAY,UAAUoC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CC,IAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAAyCJ,OAAzC,EAAkDC,MAAlD,EAA0DF,OAA1D;AACD,GAFM,CAAP;AAGD,CAJD","sourcesContent":["// TODO: update sidebar to use IDs (in case of duplicate artist/playlist names)\n\nimport * as React from \"react\";\nimport axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport animateScrollTo from \"animated-scroll-to\";\n\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport OverlayShadow from \"./components/OverlayShadow\";\n\nimport MusicVideo from \"./util/MusicVideo\";\nimport URLParser from \"./util/URLParser\";\nimport Playlist from \"./util/Playlist\";\nimport Artist from \"./util/Artist\";\n\nimport \"./stylesheets/Fonts.css\";\nimport \"./stylesheets/App.css\";\n\nconst domain = \"http://localhost:9000\";\n\ntype AppState = {\n  displayName: string;\n  currentScreen: { name: string; type: string };\n  loggedIn: boolean;\n  listsLoaded: boolean;\n  accessToken: string;\n  // countryCode: string;\n  recentlyPlayed: MusicVideo[];\n  topTracks: MusicVideo[];\n  playlists: { [id: string]: Playlist };\n  topArtists: { [id: string]: Artist };\n  sidebarShowing: boolean;\n};\n\nexport default class App extends Component<{}, AppState> {\n  state: AppState = {\n    displayName: \"\",\n    currentScreen: { name: \"Home\", type: \"Home\" },\n    loggedIn: false,\n    listsLoaded: false,\n    accessToken: \"\",\n    // countryCode: \"\",\n    recentlyPlayed: [],\n    topTracks: [],\n    playlists: {},\n    topArtists: {},\n    sidebarShowing: false,\n  };\n\n  componentDidMount() {\n    /**\n     * ----------------------------------------------Authorization Flow---------------------------------------------------\n     */\n    const cookies = new Cookies();\n    // if we were redirected from /callback (obtained an accessToken)\n    if (\n      cookies.get(\"spotifyMTVAccessToken\") !== undefined\n      // cookies.get(\"spotifyMTVCountryCode\") !== undefined\n    ) {\n      this.setState({\n        accessToken: cookies.get(\"spotifyMTVAccessToken\"),\n        // countryCode: cookies.get(\"spotifyMTVCountryCode\"),\n      });\n      const url =\n        \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" +\n        cookies.get(\"spotifyMTVAccessToken\");\n\n      fetch(url)\n        .then((res) => res.text())\n        .then((res) => this.setState({ displayName: res }));\n      // remove it from the cookies (later will hash cookie name instead of deleting it so other sites can't retrieve it)\n      cookies.remove(\"spotifyMTVAccessToken\");\n    } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\");\n\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url)\n          .then((authInfo) => authInfo.json())\n          .then((authInfo) => {\n            cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken);\n            window.location.href = \"/\"; // this will reload the page again\n          });\n      }\n    }\n  }\n\n  componentDidUpdate({}, prevState: AppState) {\n    if (prevState.accessToken === \"\" && this.state.accessToken !== \"\") {\n      this.getAllLists();\n    }\n  }\n\n  /**\n   * ----------------------------------------------------Calls to back end-------------------------------------------------\n   */\n\n  /**\n   * Calls the login endpoint to obtain an authorization URL (which will then return an auth code).\n   */\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url)\n      .then((authURL) => authURL.text())\n      .then((authURL) => (window.location.href = authURL));\n  }\n\n  /**\n   * Get all the lists after logging in.\n   * Updates state once all Promises to back-end for lists are resolved.\n   */\n  getAllLists() {\n    Promise.all([\n      this.getTopTracks(),\n      this.getRecentlyPlayed(),\n      this.getPlaylists(),\n      this.getTopArtists(),\n    ]).then((responses) => {\n      for (let i = 0; i < 3; i++) {\n        const response: void | AxiosResponse = responses[i];\n        if (typeof response === \"object\") {\n          if (i === 0) this.setState({ topTracks: response.data });\n          // if (i === 1) {\n          //   console.log(response.data);\n          //   this.setState({ recentlyPlayed: response.data });\n          // } // response is recently played\n          // if (i === 2) this.setState({ playlists: response.data }); // response is playlists\n          // if (i === 3) this.setState({ topArtists: response.data }); // response is topArtists\n        }\n      }\n      this.setState({ listsLoaded: true }); // we can get rid of loading displays\n      console.log(\"getAllLists() done\");\n    });\n  }\n\n  getTopTracks() {\n    const url =\n      domain + \"/mtvApi/getTopTracks?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets the user's Spotify display name.\n   */\n  getDisplayName() {\n    const url =\n      domain + \"/mtvApi/getDisplayName?accessToken=\" + this.state.accessToken;\n    fetch(url)\n      .then((res) => res.text())\n      .then((res) => this.setState({ displayName: res }));\n  }\n\n  /**\n   * Gets an array of music videos for the user's recently played tracks on Spotify.\n   */\n  getRecentlyPlayed() {\n    const url =\n      domain +\n      \"/mtvApi/getRecentlyPlayed?accessToken=\" +\n      this.state.accessToken;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets a dictionary of ```[id]: Playlist``` for each of the user's public playlists on Spotify.\n   */\n  getPlaylists() {\n    const url =\n      domain + \"/mtvApi/getPlaylists?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets a dictionary of ```[id]: Artist``` for each of the user's top artists on Spotify.\n   */\n  async getTopArtists() {\n    const country = \"US\"; // TODO: make this custom to client's location\n    const url =\n      domain +\n      \"/mtvApi/getTopArtists?accessToken=\" +\n      this.state.accessToken +\n      \"&country=\" +\n      country;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets all of the music videos and updates state for playlist with ```id```.\n   */\n  getPlaylistVideos(id: string) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n\n    var playlists: {\n      [id: string]: Playlist;\n    } = {};\n    Object.assign(playlists, this.state.playlists);\n    var tracks = playlists[id].tracks;\n\n    const body = {\n      tracks: tracks,\n    };\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // update the playlist's music videos in state\n        playlists[id].musicVideos = res;\n        this.setState({\n          playlists: playlists,\n        });\n      });\n  }\n\n  /**\n   * Gets all of the music videos and updates state for artist with ```id```.\n   */\n  getArtistVideos(id: string) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n\n    var topArtists: { [id: string]: Artist } = {};\n    Object.assign(topArtists, this.state.topArtists);\n    var tracks = topArtists[id].tracks;\n\n    const body = {\n      tracks: tracks,\n    };\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // update the artist's music videos in state\n        topArtists[id].musicVideos = res;\n        this.setState({\n          topArtists: topArtists,\n        });\n      });\n  }\n\n  /**\n   * --------------------------------------------Utility for Child Components-------------------------------------------------\n   */\n\n  /**\n   * Handles showing/hiding the sidebar.\n   */\n  toggleSidebar() {\n    this.setState({\n      sidebarShowing: !this.state.sidebarShowing,\n    });\n  }\n\n  /**\n   * Handles selecting a sidebar item.\n   */\n  selectSidebarItem(title: string, type: string, itemID: string) {\n    var name = \"\";\n    if (type !== \"Playlist\" && type !== \"Artist\") name = title;\n    else name = itemID;\n    this.setState({ currentScreen: { name: name, type: type } });\n    setTimeout(() => {\n      this.setState({ sidebarShowing: false });\n      animateScrollTo([0, 0], {\n        maxDuration: 400,\n      });\n    }, 150);\n  }\n\n  render() {\n    // user has logged in, show the app\n    if (this.state.accessToken.length) {\n      // get the list of music videos for the current screen\n      var musicVideos: MusicVideo[] = [];\n\n      if (this.state.currentScreen.type === \"Home\")\n        musicVideos = this.state.topTracks;\n      if (this.state.currentScreen.type === \"Recently Played\")\n        musicVideos = this.state.recentlyPlayed;\n      if (this.state.currentScreen.type === \"Playlist\")\n        musicVideos = this.state.playlists[this.state.currentScreen.name]\n          .musicVideos;\n      if (this.state.currentScreen.type === \"Artist\")\n        musicVideos = this.state.topArtists[this.state.currentScreen.name]\n          .musicVideos;\n\n      console.log(musicVideos);\n\n      return (\n        <>\n          <div className=\"container-fluid p-0\">\n            {/*----------------------------------------------------test buttons--------------------------------------------------*/}\n\n            {/* <div id=\"test-buttons\" className=\"text-center m-5\">\n              <button\n                className=\"btn spotify-button-green\"\n                onClick={() => this.getTopArtists()}\n              >\n                GET TOP ARTISTS\n              </button>\n              <br />\n              <br />\n              <button\n                className=\"btn spotify-button-green\"\n                onClick={() =>\n                  this.getArtistVideos(Object.keys(this.state.topArtists)[0])\n                }\n              >\n                GET ARTIST VIDEOS\n              </button>\n            </div> */}\n\n            {/*-------------------------------------------------------------------------------------------------------------------*/}\n\n            <Navbar\n              videos={[]}\n              toggleSidebar={() => this.toggleSidebar()}\n              listsLoaded={this.state.listsLoaded}\n            />\n            <Sidebar\n              currentScreen={this.state.currentScreen.name}\n              playlists={this.state.playlists}\n              topArtists={this.state.topArtists}\n              displaying={this.state.sidebarShowing}\n              selectSidebarItem={(\n                title: string,\n                type: string,\n                itemID: string\n              ) => this.selectSidebarItem(title, type, itemID)}\n            />\n            <OverlayShadow displaying={this.state.sidebarShowing} />\n            <Main title={this.state.currentScreen.name} videos={musicVideos} />\n          </div>\n        </>\n      );\n    }\n    // show the login screen\n    else return <Login login={() => this.login()} />;\n  }\n}\n\nvar getPosition = function (options: any) {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}