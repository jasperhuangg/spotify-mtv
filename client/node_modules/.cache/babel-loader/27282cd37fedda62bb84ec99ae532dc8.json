{"ast":null,"code":"/**\n * Given a list of music videos and a string\n * returns a list of music videos whose title, artist, album\n * include any sequence of characters from the given string\n */\nimport MusicVideo from \"./MusicVideo\"; // cache validResults to prevent searching through all videos\n// if current search input contains lastSeenSearchInput\n\nvar lastSeenSearchInput = \"\";\nvar validResults = new Array();\nexport default function KeywordParser(videos, // contains all of the songs in a user's Spotify playlists\nsearchInput) {\n  searchInput = searchInput.toLowerCase();\n\n  if (searchInput === \"\") {\n    console.log(\"empty search input\");\n    validResults = [];\n    lastSeenSearchInput = \"\";\n    return [];\n  }\n\n  var res = [];\n  var searchDomain = [];\n  if (searchInput.indexOf(lastSeenSearchInput) !== -1 && lastSeenSearchInput !== \"\") // a continuation of a previous search\n    searchDomain = validResults;else searchDomain = videos;\n  console.log(\"search domain: \");\n  console.log(searchDomain);\n\n  for (let i = 0; i < searchDomain.length; i++) {\n    const video = searchDomain[i];\n    if (video.title.toLowerCase().indexOf(searchInput) !== -1 || video.album.toLowerCase().indexOf(searchInput) !== -1 || video.artist.toLowerCase().indexOf(searchInput) !== -1) res.push(video);\n  }\n\n  lastSeenSearchInput = searchInput;\n  validResults = res; // TODO: need to sort these results\n  // so the most relevant one alphabetically comes first\n  // prioritize title, then artist, then album\n\n  return res;\n}\nvar videos = [new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\")];\nconsole.log(KeywordParser(videos, \"fu\"));\nconsole.log(KeywordParser(videos, \"fut\"));\nconsole.log(KeywordParser(videos, \"futs\"));\nconsole.log(KeywordParser(videos, \"futsa\"));\nconsole.log(KeywordParser(videos, \"futsal\"));\nconsole.log(KeywordParser(videos, \"\"));\nconsole.log(KeywordParser(videos, \"A\"));\nconsole.log(KeywordParser(videos, \"Al\"));","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/util/KeywordParser.ts"],"names":["MusicVideo","lastSeenSearchInput","validResults","Array","KeywordParser","videos","searchInput","toLowerCase","console","log","res","searchDomain","indexOf","i","length","video","title","album","artist","push"],"mappings":"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","sourcesContent":["/**\n * Given a list of music videos and a string\n * returns a list of music videos whose title, artist, album\n * include any sequence of characters from the given string\n */\n\nimport MusicVideo from \"./MusicVideo\";\n\n// cache validResults to prevent searching through all videos\n// if current search input contains lastSeenSearchInput\nvar lastSeenSearchInput = \"\";\nvar validResults = new Array();\n\nexport default function KeywordParser(\n  videos: MusicVideo[], // contains all of the songs in a user's Spotify playlists\n  searchInput: string\n) {\n  searchInput = searchInput.toLowerCase();\n\n  if (searchInput === \"\") {\n    console.log(\"empty search input\");\n    validResults = [];\n    lastSeenSearchInput = \"\";\n    return [];\n  }\n\n  var res = [];\n  var searchDomain = [];\n\n  if (\n    searchInput.indexOf(lastSeenSearchInput) !== -1 &&\n    lastSeenSearchInput !== \"\"\n  )\n    // a continuation of a previous search\n    searchDomain = validResults;\n  else searchDomain = videos;\n\n  console.log(\"search domain: \");\n  console.log(searchDomain);\n\n  for (let i = 0; i < searchDomain.length; i++) {\n    const video = searchDomain[i];\n    if (\n      video.title.toLowerCase().indexOf(searchInput) !== -1 ||\n      video.album.toLowerCase().indexOf(searchInput) !== -1 ||\n      video.artist.toLowerCase().indexOf(searchInput) !== -1\n    )\n      res.push(video);\n  }\n\n  lastSeenSearchInput = searchInput;\n  validResults = res;\n\n  // TODO: need to sort these results\n  // so the most relevant one alphabetically comes first\n  // prioritize title, then artist, then album\n\n  return res;\n}\n\nvar videos = [\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"Futsal Shuffle\",\n    \"Lil Uzi Vert\",\n    \"Eternal Atake\",\n    \"\"\n  ),\n  new MusicVideo(\n    \"no-photos.img\",\n    \"No Photos\",\n    \"Don Toliver\",\n    \"Heaven or Hell\",\n    \"\"\n  ),\n  new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"),\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"QUARANTINE CLEAN\",\n    \"Turbo, Gunna, Young Thug\",\n    \"QUARANTINE CLEAN\",\n    \"\"\n  ),\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"Bored In The House\",\n    \"Tyga, Curtis Roach\",\n    \"Bored In The House\",\n    \"\"\n  ),\n  new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"),\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"ALASKA\",\n    \"BROCKHAMPTON\",\n    \"SATURATION III\",\n    \"\"\n  ),\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"Jersey\",\n    \"Future\",\n    \"What A Time To Be Alive\",\n    \"\"\n  ),\n  new MusicVideo(\n    \"futsal-shuffle.img\",\n    \"All Bad\",\n    \"Future, Lil Uzi Vert\",\n    \"High Off Life\",\n    \"\"\n  ),\n];\n\nconsole.log(KeywordParser(videos, \"fu\"));\nconsole.log(KeywordParser(videos, \"fut\"));\nconsole.log(KeywordParser(videos, \"futs\"));\nconsole.log(KeywordParser(videos, \"futsa\"));\nconsole.log(KeywordParser(videos, \"futsal\"));\nconsole.log(KeywordParser(videos, \"\"));\nconsole.log(KeywordParser(videos, \"A\"));\nconsole.log(KeywordParser(videos, \"Al\"));\n"]},"metadata":{},"sourceType":"module"}