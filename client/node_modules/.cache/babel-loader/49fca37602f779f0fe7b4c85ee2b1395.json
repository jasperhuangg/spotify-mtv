{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx\";\nimport * as React from \"react\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport MusicVideo from \"./util/MusicVideo\";\nimport URLParser from \"./util/URLParser\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentScreen: \"Recently Played on Spotify\",\n      loggedIn: false,\n      recentlyPlayed: [],\n      accessToken: \"\"\n    };\n  }\n\n  testApi() {\n    const url = \"http://localhost:9000/testApi\";\n    fetch(url).then(res => res.text()).then(res => console.log(res));\n  }\n\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url).then(authURL => authURL.text()).then(authURL => window.location.href = authURL);\n  }\n\n  checkLoggedIn() {\n    const cookies = new Cookies();\n\n    if (cookies.get(\"spotifyMTVLoggedIn\")) {\n      this.setState({\n        loggedIn: true\n      });\n      cookies.remove(\"spotifyMTVLoggedIn\");\n    }\n  }\n\n  componentDidMount() {\n    const cookies = new Cookies();\n    console.log(\"accessToken in cookies: \" + cookies.get(\"spotifyMTVAccessToken\")); // if we were redirected from calling /callback (and obtained an accessToken)\n\n    if (cookies.get(\"spotifyMTVAccessToken\") !== undefined) {\n      this.setState({\n        accessToken: cookies.get(\"spotifyMTVAccessToken\")\n      });\n      cookies.remove(\"spotifyMTVAccessToken\"); // remove it from the cookies (will hash cookie name so other sites can't retrieve it)\n    } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\"); // if we were redirected from calling OAuth\n\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url).then(authInfo => authInfo.json()).then(authInfo => {\n          cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken);\n          window.location.href = \"/\"; // this will reload the page again\n        });\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.recentlyPlayed.length === 0 && this.state.loggedIn) {// request all of the user's playlists, top artists, and recently played\n    }\n  }\n\n  logDisplayName() {\n    const url = \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" + this.state.accessToken;\n    fetch(url).then(res => res.text()).then(res => console.log(res));\n  }\n\n  render() {\n    var testVideos = [new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\")];\n    if (this.state.accessToken.length) return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-sm btn-success m-5\",\n      onClick: () => this.logDisplayName(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 11\n      }\n    }, \"Log Display Name\"), /*#__PURE__*/React.createElement(Navbar, {\n      videos: testVideos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      title: this.state.currentScreen,\n      videos: testVideos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 11\n      }\n    }));else return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"d-flex justify-content-center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-sm btn-success m-5\",\n      onClick: () => this.login(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"Login with Spotify\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx"],"names":["React","Component","Cookies","Main","Navbar","MusicVideo","URLParser","domain","App","state","currentScreen","loggedIn","recentlyPlayed","accessToken","testApi","url","fetch","then","res","text","console","log","login","authURL","window","location","href","checkLoggedIn","cookies","get","setState","remove","componentDidMount","undefined","authCode","authInfo","json","set","componentDidUpdate","length","logDisplayName","render","testVideos"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\n\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport MusicVideo from \"./util/MusicVideo\";\nimport URLParser from \"./util/URLParser\";\n\nconst domain = \"http://localhost:9000\";\n\ntype AppState = {\n  currentScreen: string;\n  loggedIn: boolean;\n  recentlyPlayed: MusicVideo[];\n  accessToken: string;\n};\n\nexport default class App extends Component<{}, AppState> {\n  state: AppState = {\n    currentScreen: \"Recently Played on Spotify\",\n    loggedIn: false,\n    recentlyPlayed: [],\n    accessToken: \"\",\n  };\n\n  testApi() {\n    const url = \"http://localhost:9000/testApi\";\n    fetch(url)\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url)\n      .then((authURL) => authURL.text())\n      .then((authURL) => (window.location.href = authURL));\n  }\n\n  checkLoggedIn() {\n    const cookies = new Cookies();\n    if (cookies.get(\"spotifyMTVLoggedIn\")) {\n      this.setState({ loggedIn: true });\n      cookies.remove(\"spotifyMTVLoggedIn\");\n    }\n  }\n\n  componentDidMount() {\n    const cookies = new Cookies();\n    console.log(\n      \"accessToken in cookies: \" + cookies.get(\"spotifyMTVAccessToken\")\n    );\n\n    // if we were redirected from calling /callback (and obtained an accessToken)\n    if (cookies.get(\"spotifyMTVAccessToken\") !== undefined) {\n      this.setState({\n        accessToken: cookies.get(\"spotifyMTVAccessToken\"),\n      });\n      cookies.remove(\"spotifyMTVAccessToken\"); // remove it from the cookies (will hash cookie name so other sites can't retrieve it)\n    } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\");\n\n      // if we were redirected from calling OAuth\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url)\n          .then((authInfo) => authInfo.json())\n          .then((authInfo) => {\n            cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken);\n            window.location.href = \"/\"; // this will reload the page again\n          });\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.state.recentlyPlayed.length === 0 && this.state.loggedIn) {\n      // request all of the user's playlists, top artists, and recently played\n    }\n  }\n\n  logDisplayName() {\n    const url =\n      \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" +\n      this.state.accessToken;\n    fetch(url)\n      .then((res) => res.text())\n      .then((res) => console.log(res));\n  }\n\n  render() {\n    var testVideos = [\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n    ];\n\n    if (this.state.accessToken.length)\n      return (\n        <>\n          <button\n            className=\"btn btn-sm btn-success m-5\"\n            onClick={() => this.logDisplayName()}\n          >\n            Log Display Name\n          </button>\n          <Navbar videos={testVideos} />\n          <Main title={this.state.currentScreen} videos={testVideos} />\n        </>\n      );\n    else\n      return (\n        <>\n          <div className=\"d-flex justify-content-center\">\n            <button\n              className=\"btn btn-sm btn-success m-5\"\n              onClick={() => this.login()}\n            >\n              Login with Spotify\n            </button>\n          </div>\n        </>\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}