{"ast":null,"code":"var _jsxFileName = \"/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx\";\n// TODO: update sidebar to use IDs (in case of duplicate artist/playlist names)\nimport * as React from \"react\";\nimport axios from \"axios\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport animateScrollTo from \"animated-scroll-to\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport OverlayShadow from \"./components/OverlayShadow\";\nimport MusicVideo from \"./util/MusicVideo\";\nimport URLParser from \"./util/URLParser\";\nimport \"./stylesheets/Fonts.css\";\nimport \"./stylesheets/App.css\";\nconst domain = \"http://localhost:9000\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      displayName: \"\",\n      currentScreen: \"Home\",\n      loggedIn: false,\n      listsLoaded: false,\n      accessToken: \"\",\n      // countryCode: \"\",\n      recentlyPlayed: [],\n      playlists: {},\n      topArtists: {},\n      sidebarShowing: false\n    };\n  }\n\n  componentDidMount() {\n    /**\n     * ----------------------------------------------Authorization Flow---------------------------------------------------\n     */\n    const cookies = new Cookies(); // if we were redirected from /callback (obtained an accessToken)\n\n    if (cookies.get(\"spotifyMTVAccessToken\") !== undefined // cookies.get(\"spotifyMTVCountryCode\") !== undefined\n    ) {\n        this.setState({\n          accessToken: cookies.get(\"spotifyMTVAccessToken\") // countryCode: cookies.get(\"spotifyMTVCountryCode\"),\n\n        });\n        const url = \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" + cookies.get(\"spotifyMTVAccessToken\");\n        fetch(url).then(res => res.text()).then(res => this.setState({\n          displayName: res\n        })); // remove it from the cookies (later will hash cookie name instead of deleting it so other sites can't retrieve it)\n\n        cookies.remove(\"spotifyMTVAccessToken\");\n      } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\");\n\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url).then(authInfo => authInfo.json()).then(authInfo => {\n          cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken); // navigator.geolocation.getCurrentPosition(\n          //   async (position) => {\n          //     const latitude = position.coords.latitude;\n          //     const longitude = position.coords.longitude;\n          //     const geoLocationURL =\n          //       \"http://api.geonames.org/countryCodeJSON?lat=\" +\n          //       latitude +\n          //       \"&lng=\" +\n          //       longitude +\n          //       \"&username=jasperhuangg\";\n          //     await fetch(geoLocationURL)\n          //       .then((res) => res.json())\n          //       .then((res) => {\n          //         const countryCode = res.countryCode;\n          //         cookies.set(\"spotifyMTVCountryCode\", countryCode);\n          //       });\n          //   },\n          //   (err) => console.error(err)\n          // );\n\n          window.location.href = \"/\"; // this will reload the page again\n        });\n      }\n    }\n  }\n\n  componentDidUpdate({}, prevState) {\n    if (prevState.accessToken === \"\" && this.state.accessToken !== \"\") {\n      this.getAllLists();\n    }\n  }\n  /**\n   * ----------------------------------------------------Calls to back end-------------------------------------------------\n   */\n\n  /**\n   * Calls the login endpoint to obtain an authorization URL (which will then return an auth code).\n   */\n\n\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url).then(authURL => authURL.text()).then(authURL => window.location.href = authURL);\n  }\n  /**\n   * Get all the lists after logging in.\n   * Updates state once all Promises to back-end for lists are resolved.\n   */\n\n\n  getAllLists() {\n    console.log(\"in getAllLists()\");\n    Promise.all([this.getRecentlyPlayed(), this.getPlaylists(), this.getTopArtists()]).then(responses => {\n      for (let i = 0; i < 3; i++) {\n        const response = responses[i];\n\n        if (typeof response === \"object\") {\n          if (i === 0) this.setState({\n            recentlyPlayed: response.data\n          }); // response is recently played\n\n          if (i === 1) this.setState({\n            playlists: response.data\n          }); // response is playlists\n\n          if (i === 2) this.setState({\n            topArtists: response.data\n          }); // response is topArtists\n        }\n      }\n\n      this.setState({\n        listsLoaded: true\n      }); // we can get rid of loading displays\n\n      console.log(\"getAllLists() done\");\n    });\n  }\n  /**\n   * Gets the user's Spotify display name.\n   */\n\n\n  getDisplayName() {\n    const url = domain + \"/mtvApi/getDisplayName?accessToken=\" + this.state.accessToken;\n    fetch(url).then(res => res.text()).then(res => this.setState({\n      displayName: res\n    }));\n  }\n  /**\n   * Gets an array of music videos for the user's recently played tracks on Spotify.\n   */\n\n\n  getRecentlyPlayed() {\n    const url = domain + \"/mtvApi/getRecentlyPlayed?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n  /**\n   * Gets a dictionary of ```[id]: Playlist``` for each of the user's public playlists on Spotify.\n   */\n\n\n  getPlaylists() {\n    const url = domain + \"/mtvApi/getPlaylists?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n  /**\n   * Gets a dictionary of ```[id]: Artist``` for each of the user's top artists on Spotify.\n   */\n\n\n  async getTopArtists() {\n    // obtain user's current country code for Spotify Artist's Top Tracks endpoint\n    navigator.geolocation.getCurrentPosition(async position => {\n      const latitude = position.coords.latitude;\n      const longitude = position.coords.longitude;\n      const geoLocationURL = \"http://api.geonames.org/countryCodeJSON?lat=\" + latitude + \"&lng=\" + longitude + \"&username=jasperhuangg\";\n      await fetch(geoLocationURL).then(res => res.json()).then(res => {\n        const country = res.countryCode;\n        const url = domain + \"/mtvApi/getTopArtists?accessToken=\" + this.state.accessToken + \"&country=\" + country; // fetch(url)\n        //   .then((res) => res.json())\n        //   .then((res) => {\n        //     console.log(Object.keys(res).length);\n        //     console.log(res);\n        //     this.setState({ topArtists: res });\n        //   });\n\n        return axios.get(url);\n      });\n    }, err => console.error(err)); // await getPosition({})\n    //   .then(async (position: any) => {\n    //     const latitude = position.coords.latitude;\n    //     const longitude = position.coords.longitude;\n    //     const geoLocationURL =\n    //       \"http://api.geonames.org/countryCodeJSON?lat=\" +\n    //       latitude +\n    //       \"&lng=\" +\n    //       longitude +\n    //       \"&username=jasperhuangg\";\n    //     await fetch(geoLocationURL)\n    //       .then((res) => res.json())\n    //       .then((res) => {\n    //         const country = res.countryCode;\n    //         const url =\n    //           domain +\n    //           \"/mtvApi/getTopArtists?accessToken=\" +\n    //           this.state.accessToken +\n    //           \"&country=\" +\n    //           country;\n    //         // fetch(url)\n    //         //   .then((res) => res.json())\n    //         //   .then((res) => {\n    //         //     console.log(Object.keys(res).length);\n    //         //     console.log(res);\n    //         //     this.setState({ topArtists: res });\n    //         //   });\n    //         return axios.get(url);\n    //       });\n    //   })\n    //   .catch((err) => console.error(err));\n\n    const country = \"US\";\n    const url = domain + \"/mtvApi/getTopArtists?accessToken=\" + this.state.accessToken + \"&country=\" + country; // fetch(url)\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     console.log(Object.keys(res).length);\n    //     console.log(res);\n    //     this.setState({ topArtists: res });\n    //   });\n\n    return axios.get(url);\n  }\n  /**\n   * Gets all of the music videos and updates state for playlist with ```id```.\n   */\n\n\n  getPlaylistVideos(id) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n    var playlists = {};\n    Object.assign(playlists, this.state.playlists);\n    var tracks = playlists[id].tracks;\n    const body = {\n      tracks: tracks\n    };\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(res => {\n      // update the playlist's music videos in state\n      playlists[id].musicVideos = res;\n      this.setState({\n        playlists: playlists\n      });\n    });\n  }\n  /**\n   * Gets all of the music videos and updates state for artist with ```id```.\n   */\n\n\n  getArtistVideos(id) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n    var topArtists = {};\n    Object.assign(topArtists, this.state.topArtists);\n    var tracks = topArtists[id].tracks;\n    const body = {\n      tracks: tracks\n    };\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(res => {\n      // update the artist's music videos in state\n      topArtists[id].musicVideos = res;\n      this.setState({\n        topArtists: topArtists\n      });\n    });\n  }\n  /**\n   * --------------------------------------------Utility for Child Components-------------------------------------------------\n   */\n\n  /**\n   * Handles showing/hiding the sidebar.\n   */\n\n\n  toggleSidebar() {\n    this.setState({\n      sidebarShowing: !this.state.sidebarShowing\n    });\n  }\n  /**\n   * Handles selecting a sidebar item.\n   */\n\n\n  selectSidebarItem(title, type) {\n    this.setState({\n      currentScreen: title\n    });\n    setTimeout(() => {\n      this.setState({\n        sidebarShowing: false\n      });\n      animateScrollTo([0, 0], {\n        maxDuration: 400\n      });\n    }, 150);\n  }\n\n  render() {\n    var testVideos = [new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Futsal Shuffle\", \"Lil Uzi Vert\", \"Eternal Atake\", \"\"), new MusicVideo(\"no-photos.img\", \"No Photos\", \"Don Toliver\", \"Heaven or Hell\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"RENT FREE\", \"Russ\", \"RENT FREE\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"QUARANTINE CLEAN\", \"Turbo, Gunna, Young Thug\", \"QUARANTINE CLEAN\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Bored In The House\", \"Tyga, Curtis Roach\", \"Bored In The House\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"@ MEH\", \"Playboi Carti\", \"@ MEH\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"ALASKA\", \"BROCKHAMPTON\", \"SATURATION III\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"Jersey\", \"Future\", \"What A Time To Be Alive\", \"\"), new MusicVideo(\"futsal-shuffle.img\", \"All Bad\", \"Future, Lil Uzi Vert\", \"High Off Life\", \"\")]; // user has logged in, show the app\n\n    if (this.state.accessToken.length) return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container-fluid p-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      videos: testVideos,\n      toggleSidebar: () => this.toggleSidebar(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 836,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Sidebar, {\n      currentScreen: this.state.currentScreen,\n      playlists: this.state.playlists,\n      topArtists: this.state.topArtists,\n      displaying: this.state.sidebarShowing,\n      selectSidebarItem: (title, type) => this.selectSidebarItem(title, type),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 840,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(OverlayShadow, {\n      displaying: this.state.sidebarShowing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 849,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Main, {\n      title: this.state.currentScreen,\n      videos: testVideos,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 850,\n        columnNumber: 13\n      }\n    }))); // show the login screen\n    else return /*#__PURE__*/React.createElement(Login, {\n        login: () => this.login(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 855,\n          columnNumber: 17\n        }\n      });\n  }\n\n}\n\nvar getPosition = function (options) {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};","map":{"version":3,"sources":["/Users/jasper.huang/Desktop/Personal_Projects/spotify_mtv/client/src/App.tsx"],"names":["React","axios","Component","Cookies","animateScrollTo","Main","Navbar","Login","Sidebar","OverlayShadow","MusicVideo","URLParser","domain","App","state","displayName","currentScreen","loggedIn","listsLoaded","accessToken","recentlyPlayed","playlists","topArtists","sidebarShowing","componentDidMount","cookies","get","undefined","setState","url","fetch","then","res","text","remove","window","location","href","authCode","authInfo","json","set","componentDidUpdate","prevState","getAllLists","login","authURL","console","log","Promise","all","getRecentlyPlayed","getPlaylists","getTopArtists","responses","i","response","data","getDisplayName","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","geoLocationURL","country","countryCode","err","error","getPlaylistVideos","id","Object","assign","tracks","body","method","headers","JSON","stringify","musicVideos","getArtistVideos","toggleSidebar","selectSidebarItem","title","type","setTimeout","maxDuration","render","testVideos","length","getPosition","options","resolve","reject"],"mappings":"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","sourcesContent":["// TODO: update sidebar to use IDs (in case of duplicate artist/playlist names)\n\nimport * as React from \"react\";\nimport axios, { AxiosError, AxiosRequestConfig, AxiosResponse } from \"axios\";\nimport { Component } from \"react\";\nimport Cookies from \"universal-cookie\";\nimport animateScrollTo from \"animated-scroll-to\";\n\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport Login from \"./components/Login\";\nimport Sidebar from \"./components/Sidebar\";\nimport OverlayShadow from \"./components/OverlayShadow\";\n\nimport MusicVideo from \"./util/MusicVideo\";\nimport URLParser from \"./util/URLParser\";\nimport Playlist from \"./util/Playlist\";\nimport Artist from \"./util/Artist\";\n\nimport \"./stylesheets/Fonts.css\";\nimport \"./stylesheets/App.css\";\n\nconst domain = \"http://localhost:9000\";\n\ntype AppState = {\n  displayName: string;\n  currentScreen: string;\n  loggedIn: boolean;\n  listsLoaded: boolean;\n  accessToken: string;\n  // countryCode: string;\n  recentlyPlayed: Object[];\n  playlists: { [id: string]: Playlist };\n  topArtists: { [id: string]: Artist };\n  sidebarShowing: boolean;\n};\n\nexport default class App extends Component<{}, AppState> {\n  state: AppState = {\n    displayName: \"\",\n    currentScreen: \"Home\",\n    loggedIn: false,\n    listsLoaded: false,\n    accessToken: \"\",\n    // countryCode: \"\",\n    recentlyPlayed: [],\n    playlists: {},\n    topArtists: {},\n    sidebarShowing: false,\n  };\n\n  componentDidMount() {\n    /**\n     * ----------------------------------------------Authorization Flow---------------------------------------------------\n     */\n    const cookies = new Cookies();\n    // if we were redirected from /callback (obtained an accessToken)\n    if (\n      cookies.get(\"spotifyMTVAccessToken\") !== undefined\n      // cookies.get(\"spotifyMTVCountryCode\") !== undefined\n    ) {\n      this.setState({\n        accessToken: cookies.get(\"spotifyMTVAccessToken\"),\n        // countryCode: cookies.get(\"spotifyMTVCountryCode\"),\n      });\n      const url =\n        \"http://localhost:9000/mtvApi/getDisplayName?accessToken=\" +\n        cookies.get(\"spotifyMTVAccessToken\");\n\n      fetch(url)\n        .then((res) => res.text())\n        .then((res) => this.setState({ displayName: res }));\n      // remove it from the cookies (later will hash cookie name instead of deleting it so other sites can't retrieve it)\n      cookies.remove(\"spotifyMTVAccessToken\");\n    } else {\n      // obtain the authorization code from the URL (after calling /login)\n      const url = window.location.href;\n      const authCode = URLParser(url, \"code=\");\n\n      if (authCode !== \"\") {\n        const url = domain + \"/mtvApi/callback?code=\" + authCode;\n        fetch(url)\n          .then((authInfo) => authInfo.json())\n          .then((authInfo) => {\n            cookies.set(\"spotifyMTVAccessToken\", authInfo.accessToken);\n\n            // navigator.geolocation.getCurrentPosition(\n            //   async (position) => {\n            //     const latitude = position.coords.latitude;\n            //     const longitude = position.coords.longitude;\n            //     const geoLocationURL =\n            //       \"http://api.geonames.org/countryCodeJSON?lat=\" +\n            //       latitude +\n            //       \"&lng=\" +\n            //       longitude +\n            //       \"&username=jasperhuangg\";\n            //     await fetch(geoLocationURL)\n            //       .then((res) => res.json())\n            //       .then((res) => {\n            //         const countryCode = res.countryCode;\n            //         cookies.set(\"spotifyMTVCountryCode\", countryCode);\n            //       });\n            //   },\n            //   (err) => console.error(err)\n            // );\n            window.location.href = \"/\"; // this will reload the page again\n          });\n      }\n    }\n  }\n\n  componentDidUpdate({}, prevState: AppState) {\n    if (prevState.accessToken === \"\" && this.state.accessToken !== \"\") {\n      this.getAllLists();\n    }\n  }\n\n  /**\n   * ----------------------------------------------------Calls to back end-------------------------------------------------\n   */\n\n  /**\n   * Calls the login endpoint to obtain an authorization URL (which will then return an auth code).\n   */\n  login() {\n    const url = domain + \"/mtvApi/login\";\n    fetch(url)\n      .then((authURL) => authURL.text())\n      .then((authURL) => (window.location.href = authURL));\n  }\n\n  /**\n   * Get all the lists after logging in.\n   * Updates state once all Promises to back-end for lists are resolved.\n   */\n  getAllLists() {\n    console.log(\"in getAllLists()\");\n    Promise.all([\n      this.getRecentlyPlayed(),\n      this.getPlaylists(),\n      this.getTopArtists(),\n    ]).then((responses) => {\n      for (let i = 0; i < 3; i++) {\n        const response: void | AxiosResponse = responses[i];\n        if (typeof response === \"object\") {\n          if (i === 0) this.setState({ recentlyPlayed: response.data }); // response is recently played\n          if (i === 1) this.setState({ playlists: response.data }); // response is playlists\n          if (i === 2) this.setState({ topArtists: response.data });\n          // response is topArtists\n        }\n      }\n      this.setState({ listsLoaded: true }); // we can get rid of loading displays\n      console.log(\"getAllLists() done\");\n    });\n  }\n\n  /**\n   * Gets the user's Spotify display name.\n   */\n  getDisplayName() {\n    const url =\n      domain + \"/mtvApi/getDisplayName?accessToken=\" + this.state.accessToken;\n    fetch(url)\n      .then((res) => res.text())\n      .then((res) => this.setState({ displayName: res }));\n  }\n\n  /**\n   * Gets an array of music videos for the user's recently played tracks on Spotify.\n   */\n  getRecentlyPlayed() {\n    const url =\n      domain +\n      \"/mtvApi/getRecentlyPlayed?accessToken=\" +\n      this.state.accessToken;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets a dictionary of ```[id]: Playlist``` for each of the user's public playlists on Spotify.\n   */\n  getPlaylists() {\n    const url =\n      domain + \"/mtvApi/getPlaylists?accessToken=\" + this.state.accessToken;\n    return axios.get(url);\n  }\n\n  /**\n   * Gets a dictionary of ```[id]: Artist``` for each of the user's top artists on Spotify.\n   */\n  async getTopArtists() {\n    // obtain user's current country code for Spotify Artist's Top Tracks endpoint\n    navigator.geolocation.getCurrentPosition(\n      async (position) => {\n        const latitude = position.coords.latitude;\n        const longitude = position.coords.longitude;\n        const geoLocationURL =\n          \"http://api.geonames.org/countryCodeJSON?lat=\" +\n          latitude +\n          \"&lng=\" +\n          longitude +\n          \"&username=jasperhuangg\";\n        await fetch(geoLocationURL)\n          .then((res) => res.json())\n          .then((res) => {\n            const country = res.countryCode;\n            const url =\n              domain +\n              \"/mtvApi/getTopArtists?accessToken=\" +\n              this.state.accessToken +\n              \"&country=\" +\n              country;\n            // fetch(url)\n            //   .then((res) => res.json())\n            //   .then((res) => {\n            //     console.log(Object.keys(res).length);\n            //     console.log(res);\n            //     this.setState({ topArtists: res });\n            //   });\n            return axios.get(url);\n          });\n      },\n      (err) => console.error(err)\n    );\n    // await getPosition({})\n    //   .then(async (position: any) => {\n    //     const latitude = position.coords.latitude;\n    //     const longitude = position.coords.longitude;\n    //     const geoLocationURL =\n    //       \"http://api.geonames.org/countryCodeJSON?lat=\" +\n    //       latitude +\n    //       \"&lng=\" +\n    //       longitude +\n    //       \"&username=jasperhuangg\";\n    //     await fetch(geoLocationURL)\n    //       .then((res) => res.json())\n    //       .then((res) => {\n    //         const country = res.countryCode;\n    //         const url =\n    //           domain +\n    //           \"/mtvApi/getTopArtists?accessToken=\" +\n    //           this.state.accessToken +\n    //           \"&country=\" +\n    //           country;\n    //         // fetch(url)\n    //         //   .then((res) => res.json())\n    //         //   .then((res) => {\n    //         //     console.log(Object.keys(res).length);\n    //         //     console.log(res);\n    //         //     this.setState({ topArtists: res });\n    //         //   });\n    //         return axios.get(url);\n    //       });\n    //   })\n    //   .catch((err) => console.error(err));\n    const country = \"US\";\n    const url =\n      domain +\n      \"/mtvApi/getTopArtists?accessToken=\" +\n      this.state.accessToken +\n      \"&country=\" +\n      country;\n    // fetch(url)\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     console.log(Object.keys(res).length);\n    //     console.log(res);\n    //     this.setState({ topArtists: res });\n    //   });\n    return axios.get(url);\n  }\n\n  /**\n   * Gets all of the music videos and updates state for playlist with ```id```.\n   */\n  getPlaylistVideos(id: string) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n\n    var playlists: {\n      [id: string]: Playlist;\n    } = {};\n    Object.assign(playlists, this.state.playlists);\n    var tracks = playlists[id].tracks;\n\n    const body = {\n      tracks: tracks,\n    };\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // update the playlist's music videos in state\n        playlists[id].musicVideos = res;\n        this.setState({\n          playlists: playlists,\n        });\n      });\n  }\n\n  /**\n   * Gets all of the music videos and updates state for artist with ```id```.\n   */\n  getArtistVideos(id: string) {\n    const url = domain + \"/mtvApi/getVideosFromTracks\";\n\n    var topArtists: { [id: string]: Artist } = {};\n    Object.assign(topArtists, this.state.topArtists);\n    var tracks = topArtists[id].tracks;\n\n    const body = {\n      tracks: tracks,\n    };\n\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(body),\n    })\n      .then((res) => res.json())\n      .then((res) => {\n        // update the artist's music videos in state\n        topArtists[id].musicVideos = res;\n        this.setState({\n          topArtists: topArtists,\n        });\n      });\n  }\n\n  /**\n   * --------------------------------------------Utility for Child Components-------------------------------------------------\n   */\n\n  /**\n   * Handles showing/hiding the sidebar.\n   */\n  toggleSidebar() {\n    this.setState({\n      sidebarShowing: !this.state.sidebarShowing,\n    });\n  }\n\n  /**\n   * Handles selecting a sidebar item.\n   */\n  selectSidebarItem(title: string, type: string) {\n    this.setState({ currentScreen: title });\n    setTimeout(() => {\n      this.setState({ sidebarShowing: false });\n      animateScrollTo([0, 0], {\n        maxDuration: 400,\n      });\n    }, 150);\n  }\n\n  render() {\n    var testVideos = [\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Futsal Shuffle\",\n        \"Lil Uzi Vert\",\n        \"Eternal Atake\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"no-photos.img\",\n        \"No Photos\",\n        \"Don Toliver\",\n        \"Heaven or Hell\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"RENT FREE\",\n        \"Russ\",\n        \"RENT FREE\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"QUARANTINE CLEAN\",\n        \"Turbo, Gunna, Young Thug\",\n        \"QUARANTINE CLEAN\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Bored In The House\",\n        \"Tyga, Curtis Roach\",\n        \"Bored In The House\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"@ MEH\",\n        \"Playboi Carti\",\n        \"@ MEH\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"ALASKA\",\n        \"BROCKHAMPTON\",\n        \"SATURATION III\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"Jersey\",\n        \"Future\",\n        \"What A Time To Be Alive\",\n        \"\"\n      ),\n      new MusicVideo(\n        \"futsal-shuffle.img\",\n        \"All Bad\",\n        \"Future, Lil Uzi Vert\",\n        \"High Off Life\",\n        \"\"\n      ),\n    ];\n\n    // user has logged in, show the app\n    if (this.state.accessToken.length)\n      return (\n        <>\n          <div className=\"container-fluid p-0\">\n            {/*----------------------------------------------------test buttons--------------------------------------------------*/}\n\n            {/* <div id=\"test-buttons\" className=\"text-center m-5\">\n              <button\n                className=\"btn spotify-button-green\"\n                onClick={() => this.getTopArtists()}\n              >\n                GET TOP ARTISTS\n              </button>\n              <br />\n              <br />\n              <button\n                className=\"btn spotify-button-green\"\n                onClick={() =>\n                  this.getArtistVideos(Object.keys(this.state.topArtists)[0])\n                }\n              >\n                GET ARTIST VIDEOS\n              </button>\n            </div> */}\n\n            {/*-------------------------------------------------------------------------------------------------------------------*/}\n\n            <Navbar\n              videos={testVideos}\n              toggleSidebar={() => this.toggleSidebar()}\n            />\n            <Sidebar\n              currentScreen={this.state.currentScreen}\n              playlists={this.state.playlists}\n              topArtists={this.state.topArtists}\n              displaying={this.state.sidebarShowing}\n              selectSidebarItem={(title: string, type: string) =>\n                this.selectSidebarItem(title, type)\n              }\n            />\n            <OverlayShadow displaying={this.state.sidebarShowing} />\n            <Main title={this.state.currentScreen} videos={testVideos} />\n          </div>\n        </>\n      );\n    // show the login screen\n    else return <Login login={() => this.login()} />;\n  }\n}\n\nvar getPosition = function (options: any) {\n  return new Promise(function (resolve, reject) {\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}